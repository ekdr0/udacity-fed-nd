git status to see what has changed

What happens when you initialize a repository? Why do you need to do it?
When you initialize a repository you get a .git file that basically allows for git commands to be used in that directory. git status will track which files changed or all files that are in that directory that aren't being tracked.


git add
- adds to the staging area

git commit
- commits the change and if you add -m you can add a message in ""
- also git commit . would commit all in the directory


How is the staging area different from the working directory and the repository? What value do you think it offers?

the staging area is where you add changes to be committed. The working directory is where you have initialized git (all your files) the repository operates on the working directory.

this is a change.

this is another change...

"git diff" compares between the working directory and the staging area

"git diff --staged" compares between the staging area and what's been commited to the repo

'git reset --hard' gets rid of all changes in the working directory and staging area... but be careful... you can't get these back once erased.

"git checkout master" will bring you back to the master branch.


QUESTION
How can you use the staging area to make sure you have one commit per logical change?

By using git add and then git commit only when you're ready to push the changes. You can use git diff and git diff --staged to see what's different if you had to make a change once you've already staged a file and make sure you aren't overriding anything.


BRANCHES
Labels for your commits
- master is the main branch
- you can change branches by 'git checkout [otherbranch]'
- you can combine branches and that process is called merging
- you create a new branch by 'git branch [branch name without brackets]' or just typing git branch will show a list of the branches.

OMG I just made it easierrrrr